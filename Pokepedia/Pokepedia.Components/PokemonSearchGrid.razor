@using Microsoft.Extensions.Logging
@using Pokepedia.Shared

    <div class="grid poke-img">
    @if (isLoading)
    {
        <h1>Downloading pokemon in background...</h1>
    }
    else
    {
        @if (IsSinglePokemonSelected)
        {
            <p>Single Selected</p>
        }
        <QuickGrid Items="@FilteredItems" Pagination="@pagination">
            <TemplateColumn Align="Align.Center">
                <button @onclick="@(() => SelectPokemon(context))">
                    <img class="sprite" src="@(context.FrontSpriteUrl)" />
                </button>
            </TemplateColumn>
            <PropertyColumn Property="@(c => c.Name)" Sortable="true" Class="poke-name">
                <ColumnOptions>
                    <div class="search-box">
                        <input type="search" autofocus @bind="nameRepo.Name" @bind:event="oninput" placeholder="Pokemon name..." />
                    </div>
                </ColumnOptions>
            </PropertyColumn>
            <PropertyColumn Property="@(c => c.Id)" Title="No." Sortable="true" Align="Align.Right" InitialSortDirection="SortDirection.Ascending" IsDefaultSortColumn="true" />
            <PropertyColumn Property="@(c => c.Height)" Sortable="true" Align="Align.Right" />
            <PropertyColumn Property="@(c => c.Weight)" Sortable="true" Align="Align.Right" />
        </QuickGrid>
        <Paginator State="@pagination" />
    }
    </div>


@inject ILogger<PokemonSearchGrid> Logger
@inject ISelectedPokemonRepository nameRepo

@code {
    PaginationState pagination = new PaginationState { ItemsPerPage = 6 };
    IQueryable<IPokemonSummary>? UnfilteredItems;
    IQueryable<IPokemonSummary>? FilteredItems => UnfilteredItems?.Where(x => x.Name.Contains(nameRepo.Name, StringComparison.CurrentCultureIgnoreCase));
    bool IsSinglePokemonSelected => (FilteredItems?.Count() ?? 0) == 1;
    Task loadTask = null;
    bool isLoading => !loadTask?.IsCompletedSuccessfully ?? false;

    protected async Task SelectPokemon(IPokemonSummary pokemon)
    {
        await nameRepo.Save(pokemon.Name);
    }

    protected override async Task OnInitializedAsync()
    {
        if(string.IsNullOrEmpty(nameRepo.Name))
        {
            await nameRepo.Load();
        }

        UnfilteredItems = await PokemonSummaryClient.GetPokemonSummariesAsync();
        if (UnfilteredItems.Count() < PokemonConstants.NumberOfTotalPokemon)
        {
            loadTask = PokemonSummaryClient.FetchAsync();
        }
        InvokeAsync(StateHasChanged);
    }
}
